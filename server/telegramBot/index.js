const TelegramBot = require('node-telegram-bot-api');
const  bot = new TelegramBot('800384154:AAEx13ODIk5JkqBXT-DRDwe1SlUyARu78wo', { polling: true});
const fs = require('fs')
const request = require('request');
const fetch = require('node-fetch')
const events = [{
  place : '–ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è 25–∞',
  layout: [53.904273, 27.558306],
  description: '–ö–∞–∫–æ–π-—Ç–æ –±–∞—Ä',
  meetingDate: '13/05/2019'
},
  {
      place : '–°–≤–æ–±–æ–¥—ã 4',
      layout: [53.904205, 27.555305],
      description: '–ë–∞—Ä',
      meetingDate: '13/07/2019'
  },
  {
      place : '–†–∞–∫–æ–≤—Å–∫–∞—è 29',
      layout: [53.904978, 27.546629],
      description: '–ü—Ä–∞–ª–µ—Å–∫–∞',
      meetingDate: '22/05/2019'
  }

];
console.log('Bot started')

bot.onText(/\/start/, (msg)=>{
  const html = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>${msg.from.first_name}</strong>!
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç "Random cofee" üòâ
=========================================`


  let chatID = msg.chat.id


bot.sendMessage(chatID, html,{parse_mode: 'HTML'})
.then(()=>{
bot.sendPhoto(chatID, fs.readFileSync(__dirname + '/cofee.jpg'))
})
.then( ()=>{
setTimeout( function(){

    bot.sendMessage(chatID, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!', {
        reply_markup:{
  inline_keyboard:[
      [
         {text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Å–æ–±—ã—Ç–∏—è üòã',
         callback_data: '–°–æ–±—ã—Ç–∏—è'}]
  ]
 }
    })
},3000)
}

)
})

//async-awayt  1) —á–µ—Ä–µ–∑ —Ñ–µ—Ç—á –±—É–¥–µ—Ç
//const events = awaitfetch('/article/fetch/user.json'))

bot.on('callback_query', query=>{
  let chatID = query.message.chat.id

  if (query.data === '–°–æ–±—ã—Ç–∏—è') {

    async function getEvent(chatID){
      const event = await  fetch("https://forge-development.herokuapp.com/api/users/", {userTelegramId:chatID});
      const data =  event.json()

      return data
    }
    getEvent(chatID).then((data)=>{  console.log('event',data)})



    bot.sendMessage(chatID, '–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ',{
      reply_markup: {
        inline_keyboard: [events.map( (event) =>{
          return {text:event.place, callback_data: event.description}
        })]
      }
    })
  }

})

bot.on('callback_query', query=>{
  let chatID = query.message.chat.id

  for (let i=0; i<events.length; i++) {
    const html = `–•—ç–π!üòâ –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ <b>${events[i].meetingDate}</b> –ø–æ –∞–¥—Ä–µ—Å—É <b>${events[i].place}</b>
        –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ <b>${events[i].description}</b> üòé
    –ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π!`
    if (query.data==events[i].description){
      bot.sendMessage(chatID , html, {parse_mode:'HTML'}).then(()=>{
        bot.sendLocation(chatID,events[i].layout[0],events[i].layout[1])
      }).then(()=>{
        bot.sendMessage(chatID , `<a href="https://otvet.imgsmail.ru/download/8953950_7cf8b9e6cd7580a231e5ec3ed65071ab.jpg"> –∞ –≤–æ—Ç –≤–∞–º —Å—Å—ã–ª–æ—á–∫–∞ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ</a>`, {parse_mode:'HTML', disable_web_page_preview:true})

      })
    }
  }
})

const notes = [];
bot.onText(/–Ω–∞–ø–æ–º–Ω–∏ (.+) –≤ (.+)/, function (msg, match) {
  var userId = msg.from.id;
  var text = match[1];
  var time = match[2];

  notes.push({ 'uid': userId, 'time': time, 'text': text });

  bot.sendMessage(userId, '–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞–ø–æ–º–Ω—é –≤–æ —Å–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—á–∞! :)');
});

setInterval(function(){
  for (var i = 0; i < notes.length; i++){
    var curDate = new Date().getHours() + ':' + new Date().getMinutes();
    if ( notes[i]['time'] == curDate ) {
      bot.sendMessage(notes[i]['uid'], '–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –≤—ã –¥–æ–ª–∂–Ω—ã: '+ notes[i]['text'] + ' —Å–µ–π—á–∞—Å.');
      notes.splice(i,1);
    }
  }
},1000);


bot.onText(/^\/place_order/, function (msg, match) {
  const option = {
    "parse_mode": "Markdown",
    "reply_markup": {
      "one_time_keyboard": true,
      "keyboard": [[{
        text: "My phone number",
        request_contact: true
      }], ["Cancel"]]
    }
  };
  bot.sendMessage(msg.chat.id, "–ö–∞–∫ –º—ã –º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏?", option).then(() => {
    bot.on("message", (msg) => {
       console.log(msg)
      if(msg.contact.phone_number){
        bot.sendMessage(msg.chat.id, "–í–∞–≥ –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç.–∑–∞ –≤–∞–º–∏ –≤—ã–µ—Ö–∞–ª–∏")
      }

    })
  })
  //   .then(()=>{
  //   bot.on('message', (msg)=>{
  //     let option = {
  //       "parse_mode": "Markdown",
  //       "reply_markup": {
  //         "one_time_keyboard": true,
  //         "keyboard": [[{
  //           text: "My location",
  //           request_location: true
  //         }], ["Cancel"]]
  //       }
  //     };
  //     bot.sendMessage(msg.chat.id, `–ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?`, option)
  //   })
  //
  // }).then(()=>{
  //   bot.sendMessage(msg.chat.id, `–°–ø–∞—Å–∏–±–æ! —á–µ—Ä–Ω—ã–π –≤–æ—Ä–æ–Ω–æ–∫ –∑–∞ –≤–∞–º–∏ –≤—ã–µ—Ö–∞–ª`)})
})
